
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  membershipId  String?          @unique
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  department    String?
  semester      String?
  role          UserRole         @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leadingTeams  Team[]          @relation("TeamLeader")
  memberOfTeams Team[]          @relation("TeamMember")
}

model MembershipCounter {
  id    Int @id @default(1)
  count Int @default(0)
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Guides {
  id            String          @id @default(cuid())
  week String?
  title String
  description String
  icon  String
  difficulty  String
  modules String?
  topics  String[]
  duration  String? 
  guideLink  String?
}

model Team {
  id        String   @id @default(cuid())
  name      String
  leaderId  String
  leader    User     @relation("TeamLeader", fields: [leaderId], references: [id], onDelete: Cascade)
  members   User[]   @relation("TeamMember")
  projects  Project[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id            Int       @id @default(autoincrement())
  title String
  description String
  chosen  Boolean @default(false)
  icon      String
  technologies  String[]
  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String? @unique
}